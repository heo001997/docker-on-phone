#!/usr/bin/expect -f

# Set the terminal type to avoid issues with escape sequences
set timeout 240

# Check the number of arguments
if {$argc != 3} {
    puts "Usage: $argv0 <cpus> <ram-in-GB> <hard-disk-in-GB>"
    exit 1
}

# Assign arguments to variables
set cpus [lindex $argv 0]
set memory [lindex $argv 1]
set hard_disk [lindex $argv 2]
set iso_file [lindex [glob alpine-virt-*-x86_64.iso] 0]

# Start build QEMU image
exec qemu-img create -f qcow2 alpine.img ${hard_disk}G

# Build virtual mount
exec mkdir -p $env(PREFIX)/share/virtual_mount
exec cp -r virtual_mount $env(PREFIX)/share/

# Start the QEMU process
spawn qemu-system-x86_64 -machine q35 -m [expr {$memory*1024}] -smp cpus=$cpus -cpu qemu64 \
  -drive if=pflash,format=raw,read-only=on,file=$env(PREFIX)/share/qemu/edk2-x86_64-code.fd \
  -netdev user,id=n1,hostfwd=tcp::2222-:22 \
  -device virtio-net,netdev=n1 \
  -cdrom $iso_file \
  -fsdev local,id=fsdev0,path=$env(PREFIX)/share/virtual_mount,security_model=mapped \
  -device virtio-9p-pci,fsdev=fsdev0,mount_tag=hostshare \
  -nographic alpine.img

# Wait for the login prompt
expect {
    "login:" {
        send "root\r"
        after 1000

        # Copy files from hostshare
        send "mkdir -p /mnt/hostshare\r"
        after 1000
        send "mount -t 9p -o trans=virtio,version=9p2000.L hostshare /mnt/hostshare"
        send "\r"
        after 1000
        send "cp /mnt/hostshare/* ~/"
        send "\r"
        after 1000

        # UP INTERNET
        send "./up_internet.sh \r"

        # Install expect
        send "apk add expect --repository=https://dl-cdn.alpinelinux.org/alpine/latest-stable/main \r"

        exp_continue
    }
    timeout {
        puts "Login prompt not received within 240 seconds."
        exit 1
    }
    # Catch end-of-file condition
    eof {
        spawn sh -c "expect setup_virtual.expect"
        expect eof
    }
}
