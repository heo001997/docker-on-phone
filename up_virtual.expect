#!/usr/bin/expect -f

# Set the terminal type to avoid issues with escape sequences
set timeout 240

# Check the number of arguments
if {$argc != 2} {
    puts "Usage: $argv0 <cpus> <ram-in-GB>"
    exit 1
}

# Assign arguments to variables
set cpus [lindex $argv 0]
set memory [lindex $argv 1]

# Build virtual mount
exec mkdir -p $env(PREFIX)/share/virtual_mount
exec cp -r virtual_mount $env(PREFIX)/share/

# Start the QEMU process
spawn qemu-system-x86_64 -machine q35 -m [expr {$memory*1024}] -smp cpus=$cpus -cpu qemu64 \
  -drive if=pflash,format=raw,read-only=on,file=$env(PREFIX)/share/qemu/edk2-x86_64-code.fd \
  -netdev user,id=n1,hostfwd=tcp::10022-:22,hostfwd=tcp::10080-:80,hostfwd=tcp::18080-:8080,hostfwd=tcp::10443-:443,hostfwd=tcp::13000-:3000,hostfwd=tcp::13035-:3035 \
  -device virtio-net,netdev=n1 \
  -fsdev local,id=fsdev0,path=$env(PREFIX)/share/virtual_mount,security_model=mapped \
  -device virtio-9p-pci,fsdev=fsdev0,mount_tag=hostshare \
  -nographic alpine.img

# Wait for the login prompt
expect {
    " login:" {
        sleep 1
        send "root \r"
        after 1000
        send "\r"
        sleep 1

        # Copy files from hostshare
        send "cp /hostshare/* ~/"
        send "\r"
        sleep 1

        # Start script on vm
        send "apk update && apk add docker \r"
        sleep 1
        send "service docker start \r"
        sleep 1
        send "rc-update add docker \r"
        sleep 1
        send "docker run -d --name my-nginx -p 8000:80 nginx \r"
        sleep 1
        send "poweroff \r"
        sleep 1

        exp_continue
    }
    timeout {
        puts "Login prompt not received within 240 seconds."
        exit 1
    }
}
